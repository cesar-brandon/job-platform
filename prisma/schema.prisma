// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int          @id @default(autoincrement())
    email      String       @unique
    name       String?      @unique
    password   String
    Student    Student[]
    Enterprise Enterprise[]
    UserType   UserType?    @relation(fields: [userTypeId], references: [id])
    userTypeId Int?
}

model UserType {
    id   Int     @id @default(autoincrement())
    name String?
    User User[]
}

model Student {
    id             Int           @id @default(autoincrement())
    name           String?
    lastname       String?
    email          String        @unique
    Career         Career?       @relation(fields: [careerId], references: [id])
    careerId       Int?
    GraduationYear Int?
    image          String?
    Postulacion    Postulacion[]
    User           User?         @relation(fields: [userId], references: [id])
    userId         Int?
}

model Enterprise {
    id        Int     @id @default(autoincrement())
    name      String
    email     String  @unique
    image     String?
    direction String?
    phone     String?
    posts     Post[]
    User      User?   @relation(fields: [userId], references: [id])
    userId    Int?
}

model Career {
    id       Int       @id @default(autoincrement())
    name     String
    students Student[]
}

model Post {
    id           Int           @id @default(autoincrement())
    title        String
    content      String?
    published    Boolean       @default(false)
    authorId     Int
    Postulacion  Postulacion[]
    Enterprise   Enterprise?   @relation(fields: [enterpriseId], references: [id])
    enterpriseId Int?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Postulacion {
    id        Int      @id @default(autoincrement())
    student   Student? @relation(fields: [studentId], references: [id], map: "student")
    Post      Post?    @relation(fields: [postId], references: [id], map: "post")
    accepted  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    studentId Int?
    postId    Int?
}

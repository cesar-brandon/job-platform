// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int            @id @default(autoincrement())
    name          String?        @unique
    email         String         @unique
    emailVerified DateTime?
    password      String
    UserType      UserType?      @relation(fields: [userTypeId], references: [id])
    userTypeId    Int?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    Post          Post[]
    Student       Student[]
    Enterprise    Enterprise[]
    CommentVote   CommentVote[]
    Comment       Comment[]
    Vote          Vote[]
    Subscription  Subscription[]
}

model UserType {
    id   Int     @id @default(autoincrement())
    name String?
    User User[]
}

model Student {
    id             Int           @id @default(autoincrement())
    name           String?
    lastname       String?
    email          String        @unique
    Career         Career?       @relation(fields: [careerId], references: [id])
    careerId       Int?
    GraduationYear Int?
    image          String?
    Postulacion    Postulacion[]
    User           User?         @relation(fields: [userId], references: [id])
    userId         Int?
}

model Enterprise {
    id          Int            @id @default(autoincrement())
    name        String         @unique
    email       String         @unique
    image       String?
    direction   String?
    phone       String?
    User        User?          @relation(fields: [userId], references: [id])
    userId      Int?
    subscribers Subscription[]

    @@index([name])
}

model Subscription {
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
    enterpriseId Int

    @@id([userId, enterpriseId])
}

model Career {
    id       Int       @id @default(autoincrement())
    name     String
    students Student[]
}

model Post {
    id          Int           @id @default(autoincrement())
    title       String
    content     Json?
    published   Boolean       @default(false)
    Postulacion Postulacion[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    author   User? @relation(fields: [authorId], references: [id])
    authorId Int?

    comments Comment[]
    votes    Vote[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    Post      Post?    @relation(fields: [postId], references: [id])
    postId    Int?
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  Int?

    replyToId Int?      @map("replyTo")
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes     CommentVote[]
    commentId Int?
}

enum VoteType {
    UP
    DOWN
}

model Vote {
    user   User     @relation(fields: [userId], references: [id])
    userId Int
    post   Post     @relation(fields: [postId], references: [id])
    postId Int
    type   VoteType

    @@id([userId, postId])
}

model CommentVote {
    user      User?    @relation(fields: [userId], references: [id])
    userId    Int
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int
    type      VoteType

    @@id([userId, commentId])
}

model Postulacion {
    id        Int      @id @default(autoincrement())
    student   Student? @relation(fields: [studentId], references: [id], map: "student")
    Post      Post?    @relation(fields: [postId], references: [id], map: "post")
    accepted  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    studentId Int?
    postId    Int?
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
    id            String         @id @default(cuid())
    name          String         @unique
    email         String         @unique
    emailVerified DateTime?
    password      String
    role          UserRole       @default(STUDENT)
    Post          Post[]
    Student       Student[]
    Enterprise    Enterprise[]
    CommentVote   CommentVote[]
    Comment       Comment[]
    Vote          Vote[]
    Subscription  Subscription[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

enum UserRole {
    ENTERPRISE
    STUDENT
}

model Student {
    id             String        @id @default(cuid())
    name           String?
    lastname       String?
    email          String        @unique
    Career         Career?       @relation(fields: [careerId], references: [id])
    careerId       String?
    GraduationYear Int?
    image          String?
    Postulacion    Postulacion[]
    User           User?         @relation(fields: [userId], references: [id])
    userId         String?
}

model Enterprise {
    id          String         @id @default(cuid())
    name        String         @unique
    email       String         @unique
    image       String?
    direction   String?
    phone       String?
    User        User?          @relation(fields: [userId], references: [id])
    userId      String?
    subscribers Subscription[]
}

model Subscription {
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
    enterpriseId String

    @@id([userId, enterpriseId])
}

model Career {
    id       String    @id @default(cuid())
    name     String
    students Student[]
}

model Post {
    id          String        @id @default(cuid())
    title       String
    content     Json?
    published   Boolean       @default(false)
    Postulacion Postulacion[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    comments Comment[]
    votes    Vote[]
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    Post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?

    replyToId String?   @map("replyTo")
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes     CommentVote[]
    commentId String?
}

enum VoteType {
    UP
    DOWN
}

model Vote {
    user   User     @relation(fields: [userId], references: [id])
    userId String
    post   Post     @relation(fields: [postId], references: [id])
    postId String
    type   VoteType

    @@id([userId, postId])
}

model CommentVote {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId String
    type      VoteType

    @@id([userId, commentId])
}

model Postulacion {
    id        String   @id @default(cuid())
    student   Student  @relation(fields: [studentId], references: [id], map: "student")
    Post      Post     @relation(fields: [postId], references: [id], map: "post")
    accepted  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    studentId String
    postId    String
}
